1. 写出获取Class实例的三种常见方式
Class clazz1 = String.class;
Class clazz2 = person.getClass();
Class clazz3 = Class.forName(String classPath) //  体现反射的动态性


2. 谈谈对Class类的理解
         * 1 类的加载过程
         * 程序经过javac.exe命令以后，会生成一个或多个字节码文件（.class结尾）,接着我们使用
         * java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。此过程称为类的加载
         * 加载到内存中的类，我们称为运行时类，此运行时类，就作为Class的一个实例。
         *
         * 2 换句话说，Class的实例就对应着一个运行时类
         *
         * 3 加载到内存中的运行时类，会缓存一定的时间，在此时间之内，我们可以通过不同的方式来获取此运行时类、
         *


3. 创建Class对应运行时类的对象的通用方法，代码实现，以及这样操作，需要对应的运行时类的构造器方面满足的要求
Object obj = clazz.newInstance(); // 创建了读经的运行时类的对象
（1): 必须要有空参的构造器
（2): 权限修饰符的权限要够，通常设置为public


4. 在工程或module的src下有名为"jdbc.properties"的配置文件，文件内容为：name = Tom。如何在程序中通过代码获取Tom这个变量


5. 如何调用show()方法
Class User{
   public void show() {
      System.out.println(“我是一个中国人”）;
   }
}
Class clazz = User.class();
User user = (User)clazz.newInstance();
Method show = clazz.getDeclaredMethod("show");
show.setAccessible(true);
show.invoke(user);


6. 关于反射的理解
反射是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API 取得任何类的内部信息，并能直接操作任意对象的内部属性和方法
框架 = 反射 + 注解 + 设计模式


7. 体会反射机制的“动态性”


8. 反射机制能提供的功能
在运行时判断任意一个对象所属的类
在运行时构造任意一个类的对象
在运行时判断任意一个类所具有的成员变量和方法
在运行时获取泛型信息
在运行时调用任意一个对象的成员变量和方法
在运行是处理注解
生成动态代理

9. 相关API
java.lang.Class: 反射的源头
java.lang.reflect.Method
java.lang.reflect.Field
java.lang.reflect.Constructor


10. 获取Class实例的几种方式：（前三种需要掌握）
        // 方式一： 调用运行时类的属性.class
        Class<Person> clazz1 = Person.class;
        System.out.println(clazz1);

        // 方式二：通过运行时类的对象,调用getClass()
        Person p1 = new Person();
        Class clazz2 = p1.getClass();
        System.out.println(clazz2);

        // 方式三：调用Class的静态方法：forName(String classPath)
        Class clazz3 = Class.forName("Person");
        System.out.println(clazz3);

        System.out.println(clazz1 == clazz2);
        System.out.println(clazz2 == clazz3);

        // 方式四：类的加载器： ClassLoader
        ClassLoader classLoader = ReflectionTest.class.getClassLoader();
        Class clazz4 = classLoader.loadClass("Person");
        System.out.println(clazz4);
        
        
11. 总结：创建类的对象的方式
方式一： new + 构造器
方式二： 要创建xxx类的对象，可以考虑：Xxx、Xxxs、XxxFactory、XxxBuilder类中查看是否有静态方法的存在。可以调用其静态方法，创建xxx对象
方式三： 通过反射


12. Class实例可以是哪些结构的说明
（1）class: 外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类
（2）interface: 接口
（3）[]：数组
（4）enum：枚举
（5）annotation：注解@interface
（6）primitive type：基本数据类型
（7）void


13. 类的加载过程
(1) 类的加载： 将类的class文件读入内存，并为之创建一个java.lang.Class对象。此过程由类加载器完成
(2) 类的链接： 将类的二进制数据合并到JRE中
(3) 类的初始化： JVM负责对类进行初始化


14. 类的加载器作用
将class文件字节码内容加载到内存中，并将这些静态数据转换成方法去的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口


15. 类的加载器的分类
引导类加载器 扩展类加载器 系统类加载器


16. 使用Classloader加载src目录下的配置文件

重点掌握






